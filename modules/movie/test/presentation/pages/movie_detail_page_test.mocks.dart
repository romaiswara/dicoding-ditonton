// Mocks generated by Mockito 5.4.2 from annotations
// in movie/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/domain.dart' as _i2;
import 'package:movie/presentation/cubit/base_state.dart' as _i3;
import 'package:movie/presentation/cubit/movie_detail_cubit.dart' as _i4;
import 'package:movie/presentation/cubit/movie_watchlist_action_cubit.dart'
    as _i8;
import 'package:movie/presentation/cubit/movie_watchlist_status_cubit.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_1 extends _i1.SmartFake
    implements _i2.GetMovieRecommendations {
  _FakeGetMovieRecommendations_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseState_2<T> extends _i1.SmartFake implements _i3.BaseState<T> {
  _FakeBaseState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatus_3 extends _i1.SmartFake
    implements _i2.GetWatchListStatus {
  _FakeGetWatchListStatus_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlistMovie_4 extends _i1.SmartFake
    implements _i2.SaveWatchlistMovie {
  _FakeSaveWatchlistMovie_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlistMovie_5 extends _i1.SmartFake
    implements _i2.RemoveWatchlistMovie {
  _FakeRemoveWatchlistMovie_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i4.MovieDetailCubit {
  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
        Invocation.getter(#getMovieDetail),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
        returnValueForMissingStub: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
      ) as _i2.GetMovieDetail);
  @override
  _i2.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getMovieRecommendations),
        returnValue: _FakeGetMovieRecommendations_1(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
        returnValueForMissingStub: _FakeGetMovieRecommendations_1(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
      ) as _i2.GetMovieRecommendations);
  @override
  _i3.BaseState<_i2.MovieDetail> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBaseState_2<_i2.MovieDetail>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeBaseState_2<_i2.MovieDetail>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.BaseState<_i2.MovieDetail>);
  @override
  _i5.Stream<_i3.BaseState<_i2.MovieDetail>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.BaseState<_i2.MovieDetail>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i3.BaseState<_i2.MovieDetail>>.empty(),
      ) as _i5.Stream<_i3.BaseState<_i2.MovieDetail>>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void get({required int? id}) => super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.BaseState<_i2.MovieDetail>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i6.Change<_i3.BaseState<_i2.MovieDetail>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [MovieWatchlistStatusCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistStatusCubit extends _i1.Mock
    implements _i7.MovieWatchlistStatusCubit {
  @override
  _i2.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchListStatus),
        returnValue: _FakeGetWatchListStatus_3(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
        returnValueForMissingStub: _FakeGetWatchListStatus_3(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
      ) as _i2.GetWatchListStatus);
  @override
  bool get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Stream<bool> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<bool>.empty(),
        returnValueForMissingStub: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void get({required int? id}) => super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(bool? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i6.Change<bool>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [MovieWatchlistActionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistActionCubit extends _i1.Mock
    implements _i8.MovieWatchlistActionCubit {
  @override
  _i2.SaveWatchlistMovie get saveWatchlistMovie => (super.noSuchMethod(
        Invocation.getter(#saveWatchlistMovie),
        returnValue: _FakeSaveWatchlistMovie_4(
          this,
          Invocation.getter(#saveWatchlistMovie),
        ),
        returnValueForMissingStub: _FakeSaveWatchlistMovie_4(
          this,
          Invocation.getter(#saveWatchlistMovie),
        ),
      ) as _i2.SaveWatchlistMovie);
  @override
  _i2.RemoveWatchlistMovie get removeWatchlistMovie => (super.noSuchMethod(
        Invocation.getter(#removeWatchlistMovie),
        returnValue: _FakeRemoveWatchlistMovie_5(
          this,
          Invocation.getter(#removeWatchlistMovie),
        ),
        returnValueForMissingStub: _FakeRemoveWatchlistMovie_5(
          this,
          Invocation.getter(#removeWatchlistMovie),
        ),
      ) as _i2.RemoveWatchlistMovie);
  @override
  _i3.BaseState<String> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBaseState_2<String>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeBaseState_2<String>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.BaseState<String>);
  @override
  _i5.Stream<_i3.BaseState<String>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.BaseState<String>>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.BaseState<String>>.empty(),
      ) as _i5.Stream<_i3.BaseState<String>>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add({required _i2.MovieDetail? detail}) => super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {#detail: detail},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void remove({required int? id}) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.BaseState<String>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i6.Change<_i3.BaseState<String>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
